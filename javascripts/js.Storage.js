// Generated by CoffeeScript 1.7.1

/*
Simplifies (a bit) access to HTML5 local and session storage.
Assumes that browser supports HTML5 Web Storage, doesn't provide for testing such support
In particular, allows:
   switching between local and session storage
   copying from one storage to another
   traversing all items
Also, makes coding a bit easier
   method calls can be chained
(Could be a jQuery plugin)
Copyright 2014 Jan Stelovsky, MIT license (use as you wish, don't complain:)
 */

(function() {
  if (window.js == null) {
    window.js = {};
  }

  window.js.Storage = (function() {
    function Storage() {}

    Storage.storage = localStorage;

    Storage.isLocal = true;

    Storage.isSupported = function() {
      return typeof localStorage !== "undefined" && localStorage !== null;
    };

    Storage.session = function() {
      Storage.storage = sessionStorage;
      Storage.isLocal = false;
      return Storage;
    };

    Storage.local = function() {
      Storage.storage = localStorage;
      Storage.isLocal = true;
      return Storage;
    };

    Storage.type = function() {
      if (Storage.isLocal) {
        return 'local';
      } else {
        return 'session';
      }
    };

    Storage.size = function() {
      return Storage.storage.length;
    };

    Storage.key = function(index) {
      return Storage.storage.key(index);
    };

    Storage.item = function(key, data) {
      if (data != null) {
        Storage.storage.setItem(key, data);
        return Storage;
      } else {
        return Storage.storage.getItem(key);
      }
    };

    Storage.remove = function(key) {
      Storage.storage.removeItem(key);
      return Storage;
    };

    Storage.clear = function(key) {
      Storage.storage.clear();
      return Storage;
    };

    Storage.traverse = function(action) {
      var _i, _ref, _results;
      $.each((function() {
        _results = [];
        for (var _i = 0, _ref = this.storage.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function(i) {
        var key;
        key = Storage.storage.key(i);
        return action(key, Storage.item(key));
      });
      return Storage;
    };

    Storage.copy = function() {
      var other;
      other = Storage.storage === localStorage ? sessionStorage : localStorage;
      other.clear();
      return Storage.traverse((function(_this) {
        return function(key, value) {
          return other.setItem(key, value);
        };
      })(this));
    };

    return Storage;

  })();

}).call(this);
